#!/usr/bin/python3

import matplotlib.pyplot as plt

def load_data(filename):
    filename = "../data/" + filename
    with open(filename, 'r') as f:
        file = f.read().split('\n')[:-1]
    return [ [ int(num) for num in row.split(" ") ] for row in file ]

def parse_data(data):
    size = []
    op_el = []
    op_base = []

    for s, ob, oe in data:
        size.append(s)
        op_el.append(oe)
        op_base.append(ob)
    return size, op_el, op_base

def drawplot(algorithm_name, size, random, sort, isort, domi):
    fig, ax = plt.subplots(figsize=(8, 7))
    ax.set_title(algorithm_name)
    ax.set_xlabel('Rozmiar tablicy')
    ax.set_ylabel(algorithm_name)
    ax.grid(True);

    # fill four 
    ax.plot(size, random, label='dane losowe')
    ax.legend()
    ax.plot(size, sort, label='dane posortowane')
    ax.legend()
    ax.plot(size, isort, label='dane posortowane odwrotnie')
    ax.legend()
    ax.plot(size, domi, label='elementy dominujÄ…ce')
    ax.legend()

    plt.savefig(algorithm_name+'.png');

# save 3 element of every entry to appropriate array
# save 2 element of one of arrays
sort = load_data("insert_sort-sort.txt")
isort = load_data("insert_sort-inversed_sort.txt")
random = load_data("insert_sort-random.txt")

size, sort, op_base = parse_data(sort)
size, isort, op_base = parse_data(isort)
size, random, op_base = parse_data(random)

drawplot("insert sort", size, random, sort, isort, op_base)

sort = load_data("merge_sort-inversed_sort.txt")
isort = load_data("merge_sort-random.txt")
random = load_data("merge_sort-sort.txt")

size, sort, op_base = parse_data(sort)
size, isort, op_base = parse_data(isort)
size, random, op_base = parse_data(random)

drawplot("merge sort", size, random, sort, isort, op_base)

sort = load_data("selection_sort-inversed_sort.txt")
isort = load_data("selection_sort-random.txt")
random = load_data("selection_sort-sort.txt")

size, sort, op_base = parse_data(sort)
size, isort, op_base = parse_data(isort)
size, random, op_base = parse_data(random)

drawplot("selection sort", size, random, sort, isort, op_base)

# plot presents change of resistance in usb power pins and its effect on
# voltage and current

def resistance(voltage, current):
    return voltage / current

def voltage(resistance, current):
    return resistance * current

def amps(resistance, voltage):
    return voltage / resistance



